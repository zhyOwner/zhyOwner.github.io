<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on zhySmile</title>
    <link>http://zhyOwner.github.io/tags/unity/</link>
    <description>Recent content in Unity on zhySmile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Sun, 09 Sep 2018 21:15:06 +0800</lastBuildDate>
    
	<atom:link href="http://zhyOwner.github.io/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unity 之协程</title>
      <link>http://zhyOwner.github.io/post/unitycoroutine/</link>
      <pubDate>Sun, 09 Sep 2018 21:15:06 +0800</pubDate>
      
      <guid>http://zhyOwner.github.io/post/unitycoroutine/</guid>
      <description>Unity 之协程 1.什么是协程 协程即协同程序，是一种特殊的函数，能够中断执行当前的代码，直到中断指令结束后再接着执行之前的代码。
2.协程的作用 1. 延时等待一段时间执行代码 2. 等某个操作完成之后再执行后面的代码  3.协程的原理 Unity 在每一帧都会去处理 GameObject 里带有的 Coroutine Function, 直到 Coroutine Function 被执行完毕. 当一个 Coroutine 开始启动时, 它会执行到遇到 yield 为止, 遇到 yield 的时候 Coroutine 会暂停执行, 直到满足 yield 语句的条件, 会开始执行 yield 语句后面的内容, 直到遇到下一个 yield 为止 &amp;hellip; 如此循环直到整个函数结束。 Unity 的协程系统基于 C# 的接口 : IEnumerator, 允许为自己的集合类型编写枚举类. 迭代器模式是通过 IEnumerator 和 IEnumerable 接口及它们的泛型等价物来封装的。如果某个类型实现了 IEnumerable 接口，就意味着它可以被迭代访问。
IEnumerator 接口定义了以向前方式遍历或枚举集合元素的基本底层协议。声明方式如下：
public interface IEnumerator { object Current { get; } bool MoveNext(); void Reset(); }  MoveNext 将当前元素向前移动到下一个位置，如果集合中没有更多的元素，那么它会返回 false。Current 返回当前位置的元素。在取出第一个元素之前，必须先调用 MoveNext——即使是空集合也支持这个操作。调用 Reset 方法的作用是将位置移动回到起点，允许再一次遍历集合。</description>
    </item>
    
    <item>
      <title>U3D AssetBundle 官方文档（翻译版）学习笔记</title>
      <link>http://zhyOwner.github.io/post/assetbundlemanual1/</link>
      <pubDate>Sun, 13 May 2018 21:57:23 +0800</pubDate>
      
      <guid>http://zhyOwner.github.io/post/assetbundlemanual1/</guid>
      <description>AssetBundle 官方文档学习笔记 最近在看何三思翻译的 Unity AssetBundle 官方文档，在此整理一下前半部分笔记
AssetBundles AssetBundle是什么？ 会在运行时被加载的归档文件，包含了和平台相关的特定资源。（Models、Textures、Prefabs、Audio clips、Scenes）
压缩方式？ 根据实际需要，选择引擎内置的算法进行压缩。（LZMA 算法和 LZ4 算法）
作用？ 可下载的内容更新（DLC)、降低初始安装包大小、针对用户平台进行最优化资源加载、降低运行时的内存压力
ssetBundle里有什么？ 1、存储在磁盘上的实际文件，称这种文件为“AssetBundle 归档&amp;rdquo;,里面保存了额外的一些文件。分为两种：序列化文件和资源文件。 2、实际的 AssetBundle 对象。包含了添加到归档中的所有资产（Assets）的文件路径以及与这些资产相对应的对象们这两者之间的映射。 什么是序列化文件？ 用资产组合形成各个对象，将他们写入磁盘中的一个文件，这个文件就是序列化文件。 什么是资源文件？ 一个个二进制数据块，这些数据块分别存储了特定类型的资产，这可以让我们在另一个线程上上更有效的从磁盘中加载它们。
AssetBundle工作流 配置 Assets 到 AssetBundles? 在 Inspector 面板底部，可以设置 AssetBundle 及其变量。左侧设置 AssetBundle，右侧设置变量。下拉选项栏会显示已经注册过的 AssetBundle 的名称选项
AssetBundle 名称？ 支持目录结构。想要添加子文件夹，只需要用”/“分隔文件名称即可。
变量？ 变量名称对创建 AssetBundle 不是必须的。
创建 AssetBundles？ 写一个编辑器脚本 BuildPipeline.BuildAssetBundles(string outputPath, BuildAssetBundleOptions assetBundleOptions, BuildTarget targetPlatform)； 所有被命名了的 Assets 都会被构建成对应的 AssetBundle ，并放置在定义的路径下。 加载 AssetBundles 和 Assets? 本地仓库：AssetBundle.LoadFromFile(string path)； 远程仓库：UnityWebRequest.GetAssetBundle(string uri)； DownloadHandlerAssetBundle.</description>
    </item>
    
  </channel>
</rss>